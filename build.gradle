// For those who want the bleeding edge
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    // For people who want stable
    //id "net.minecraftforge.gradle.forge" version "2.0.2"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'
apply plugin: 'maven'

loadProperties()

version = config.mod_version
group = "org.cyclops.integrateddynamicscompat"
archivesBaseName = "IntegratedDynamicsCompat"
sourceCompatibility = 1.8
targetCompatibility = 1.8

def loadProperties() {
    // Config file with custom properties
    ext.configFile = file "build.properties"
    configFile.withReader {
        def prop = new Properties()
        prop.load(it)
        ext.config = new ConfigSlurper().parse prop
    }

    // grab buildNumber
    ext.buildnumber = "DEV" // this will be referenced as simply project.buildnumber from now on.
    if (System.getenv().BUILD_NUMBER)
        project.buildnumber = System.getenv().BUILD_NUMBER
    if (System.getenv().TRAVIS_BUILD_NUMBER)
        project.buildnumber = System.getenv().TRAVIS_BUILD_NUMBER

    if (System.getenv().RELEASE || System.getenv().TRAVIS_TAG)
        project.buildnumber = "RELEASE"
    logger.lifecycle "BUILDING VERSION: " + project.buildnumber
}

sourceSets {
    main
    test
}

repositories {
    mavenCentral()
	mavenLocal()
    maven {
        name "Cyclops Repo"
        url "https://oss.jfrog.org/artifactory/simple/libs-release/"
    }
    maven {
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name 'tterrag'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'Tehnut'
        url 'https://tehnut.info/maven/'
    }
    maven {
        name "Raoulvdberge Repo"
        url "https://repo.raoulvdberge.com/"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"

	// Add something like 'integrateddynamics_version_local=0.1.0-DEV' to your gradle.properties if you want to use a custom local Integrated Dynamics version.
    if(project.hasProperty("integrateddynamics_version_local")) {
        compile "org.cyclops.integrateddynamics:IntegratedDynamics:${config.minecraft_version}-${project.integrateddynamics_version_local}:deobf"
        runtime "com.google.re2j:re2j:1.1"
    } else {
        compile("org.cyclops.integrateddynamics:IntegratedDynamics:${config.minecraft_version}-${config.integrateddynamics_version}:deobf") {
            exclude group: 'org.cyclops.cyclopscore', module: 'CyclopsCore'
            exclude group: 'org.cyclops.commoncapabilities', module: 'CommonCapabilities'
        }
        runtime "com.google.re2j:re2j:1.1"
    }
    // Add something like 'cyclopscore_version_local=0.1.0-DEV' to your gradle.properties if you want to use a custom local CyclopsCore version.
    if(project.hasProperty("cyclopscore_version_local")) {
        compile "org.cyclops.cyclopscore:CyclopsCore:${config.minecraft_version}-${project.cyclopscore_version_local}:deobf"
    } else {
        compile "org.cyclops.cyclopscore:CyclopsCore:${config.minecraft_version}-${config.cyclopscore_version}:deobf"
    }

    compile("org.cyclops.commoncapabilities:CommonCapabilities:${config.commoncapabilities_version}:deobf") { // https://dl.bintray.com/cyclopsmc/dev/org/cyclops/commoncapabilities/CommonCapabilities/
        exclude group: 'org.cyclops.cyclopscore', module: 'CyclopsCore'
    }

    compile fg.deobf("mezz.jei:jei-${config.jei_version}") // https://dvs1.progwml6.com/jenkins/
    compile fg.deobf("mcjty.theoneprobe:TheOneProbe-1.15:${config.theoneprobe_version}") // https://maven.tterrag.com/mcjty/theoneprobe/
    compile fg.deobf("mcp.mobius.waila:Hwyla:${config.waila_version}") // https://github.com/TehNut/HWYLA and https://github.com/TehNut/temporary-maven-thing/tree/master/maven/mcp/mobius/waila/Hwyla
    compile fg.deobf("com.raoulvdberge:refinedstorage:${config.refinedstorage_version}") // https://repo.raoulvdberge.com/com/raoulvdberge/refinedstorage/
}

minecraft {
    mappings channel: "${config.mcp_mappings_channel}", version: "${config.mcp_mappings_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                integrateddynamics {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                integrateddynamics {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'integrateddynamics', '--all', '--output', file('src/generated/resources/')
            mods {
                integrateddynamics {
                    source sourceSets.main
                }
            }
        }
    }
}

if (project.buildnumber.equals("RELEASE"))
    version = "${config.minecraft_version}-${config.mod_version}"
else
    version = "${config.minecraft_version}-${config.mod_version}-${buildnumber}"

jar {
    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${config.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${config.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": "${project.name}",
                "Specification-Vendor": "rubensworks",
                "Specification-Version": "${config.mod_version}",
                "Implementation-Title": "${project.name}",
                "Implementation-Version": "${config.mod_version}",
                "Implementation-Vendor" :"rubensworks",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar) {
    from (sourceSets.main.output) {
        include "**/api/**/*"
    }
    includeEmptyDirs = false
    version = "${project.config.api_version}"
    classifier = "api"
}

task sourceJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier 'javadoc'
}

artifacts {
    archives deobfJar
    archives sourceJar
    archives javadocJar
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
}

uploadArchives {
    repositories {
        add getProject().repositories.mavenLocal()
    }
    repositories.mavenDeployer {
        configuration = configurations.deployerJars

        if (project.hasProperty("filesmaven_url")) {
            logger.info('Publishing to files server')
            repository(url: project.filesmaven_url) {
                authentication(userName: project.filesmaven_username, password: project.filesmaven_key)
            }
        } else if (System.getenv().MAVEN_URL) {
            logger.info('Publishing to files server')
            repository(url: System.getenv().MAVEN_URL) {
                authentication(userName: System.getenv().MAVEN_USERNAME, password: System.getenv().MAVEN_KEY)
            }
        } else {
            logger.info('Publishing to repo folder')
            repository(url: 'file://localhost/' + project.file('~/.m2/repository').getAbsolutePath())
        }

        pom {
            groupId = project.group
            version = project.version
            artifactId = project.archivesBaseName
        }
        pom.project {
            name project.archivesBaseName
            packaging 'jar'
            description 'todo'
            url 'https://github.com/CyclopsMC/IntegratedDynamics-Compat'

            scm {
                url 'https://github.com/CyclopsMC/IntegratedDynamics-Compat'
                connection 'scm:git:git://github.com/CyclopsMC/IntegratedDynamics-Compat.git'
                developerConnection 'scm:git:git@github.com:CyclopsMC/IntegratedDynamics-Compat.git'
            }

            issueManagement {
                system 'github'
                url 'https://github.com/CyclopsMC/IntegratedDynamics-Compat/issues'
            }

            developers {
                developer {
                    id 'rubensworks'
                    name 'rubensworks'
                    roles { role 'developer' }
                }
            }
        }
    }
}
uploadArchives.dependsOn build

idea {
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

sourceSets {
    main {
        java {
            // TODO: temporarily disable some mod compats
            exclude '**/modcompat/charset/**'
            exclude '**/modcompat/forestry/**'
            exclude '**/modcompat/ic2/**'
            exclude '**/modcompat/immersiveengineering/**'
            exclude '**/modcompat/mcmultipart/**'
            exclude '**/modcompat/minetweaker/**'
            exclude '**/modcompat/signals/**'
            exclude '**/modcompat/tconstruct/**'
            exclude '**/modcompat/tesla/**'
            exclude '**/modcompat/thaumcraft/**'
        }
    }
}
